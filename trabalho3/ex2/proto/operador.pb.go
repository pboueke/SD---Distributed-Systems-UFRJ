// Code generated by protoc-gen-go.
// source: proto/operador.proto
// DO NOT EDIT!

/*
Package operador is a generated protocol buffer package.

It is generated from these files:
	proto/operador.proto

It has these top-level messages:
	Numbers
	NumbersPower
	Result
*/
package operador

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Numbers struct {
	Array []byte `protobuf:"bytes,1,opt,name=array,proto3" json:"array,omitempty"`
	Size  int32  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *Numbers) Reset()                    { *m = Numbers{} }
func (m *Numbers) String() string            { return proto.CompactTextString(m) }
func (*Numbers) ProtoMessage()               {}
func (*Numbers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NumbersPower struct {
	Array []byte `protobuf:"bytes,1,opt,name=array,proto3" json:"array,omitempty"`
	Size  int32  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Power int32  `protobuf:"varint,3,opt,name=power" json:"power,omitempty"`
}

func (m *NumbersPower) Reset()                    { *m = NumbersPower{} }
func (m *NumbersPower) String() string            { return proto.CompactTextString(m) }
func (*NumbersPower) ProtoMessage()               {}
func (*NumbersPower) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Result struct {
	Array []byte `protobuf:"bytes,1,opt,name=array,proto3" json:"array,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Numbers)(nil), "Numbers")
	proto.RegisterType((*NumbersPower)(nil), "NumbersPower")
	proto.RegisterType((*Result)(nil), "Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Operador service

type OperadorClient interface {
	RpcLog(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Result, error)
	RpcSqrt(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Result, error)
	RpcPower(ctx context.Context, in *NumbersPower, opts ...grpc.CallOption) (*Result, error)
}

type operadorClient struct {
	cc *grpc.ClientConn
}

func NewOperadorClient(cc *grpc.ClientConn) OperadorClient {
	return &operadorClient{cc}
}

func (c *operadorClient) RpcLog(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/Operador/rpcLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operadorClient) RpcSqrt(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/Operador/rpcSqrt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operadorClient) RpcPower(ctx context.Context, in *NumbersPower, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/Operador/rpcPower", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Operador service

type OperadorServer interface {
	RpcLog(context.Context, *Numbers) (*Result, error)
	RpcSqrt(context.Context, *Numbers) (*Result, error)
	RpcPower(context.Context, *NumbersPower) (*Result, error)
}

func RegisterOperadorServer(s *grpc.Server, srv OperadorServer) {
	s.RegisterService(&_Operador_serviceDesc, srv)
}

func _Operador_RpcLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Numbers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperadorServer).RpcLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Operador/RpcLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperadorServer).RpcLog(ctx, req.(*Numbers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operador_RpcSqrt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Numbers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperadorServer).RpcSqrt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Operador/RpcSqrt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperadorServer).RpcSqrt(ctx, req.(*Numbers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operador_RpcPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumbersPower)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperadorServer).RpcPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Operador/RpcPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperadorServer).RpcPower(ctx, req.(*NumbersPower))
	}
	return interceptor(ctx, in, info, handler)
}

var _Operador_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Operador",
	HandlerType: (*OperadorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rpcLog",
			Handler:    _Operador_RpcLog_Handler,
		},
		{
			MethodName: "rpcSqrt",
			Handler:    _Operador_RpcSqrt_Handler,
		},
		{
			MethodName: "rpcPower",
			Handler:    _Operador_RpcPower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("proto/operador.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x2f, 0x48, 0x2d, 0x4a, 0x4c, 0xc9, 0x2f, 0xd2, 0x03, 0x73, 0x95, 0x8c, 0xb9,
	0xd8, 0xfd, 0x4a, 0x73, 0x93, 0x52, 0x8b, 0x8a, 0x85, 0x44, 0xb8, 0x58, 0x13, 0x8b, 0x8a, 0x12,
	0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0x20, 0x1c, 0x21, 0x21, 0x2e, 0x96, 0xe2, 0xcc,
	0xaa, 0x54, 0x09, 0x26, 0xa0, 0x20, 0x6b, 0x10, 0x98, 0xad, 0xe4, 0xc7, 0xc5, 0x03, 0xd5, 0x14,
	0x90, 0x5f, 0x9e, 0x5a, 0x44, 0xbc, 0x4e, 0x90, 0xca, 0x02, 0x90, 0x16, 0x09, 0x66, 0xb0, 0x20,
	0x84, 0xa3, 0x24, 0xc7, 0xc5, 0x16, 0x94, 0x5a, 0x5c, 0x9a, 0x53, 0x82, 0xdd, 0x24, 0xa3, 0x7c,
	0x2e, 0x0e, 0x7f, 0xa8, 0xb3, 0x85, 0x64, 0xb9, 0xd8, 0x8a, 0x0a, 0x92, 0x7d, 0xf2, 0xd3, 0x85,
	0x38, 0xf4, 0xa0, 0x8e, 0x90, 0x62, 0xd7, 0x83, 0x68, 0x57, 0x62, 0x10, 0x92, 0xe3, 0x62, 0x07,
	0x4a, 0x07, 0x17, 0x16, 0x95, 0x60, 0x97, 0x57, 0xe1, 0xe2, 0x00, 0xca, 0x43, 0x9c, 0xcd, 0xab,
	0x87, 0xec, 0x0b, 0x24, 0x55, 0x4e, 0xaa, 0x5c, 0x42, 0x25, 0x45, 0x89, 0x49, 0x89, 0x39, 0x19,
	0xf9, 0xc6, 0x7a, 0xb0, 0x10, 0x73, 0xe2, 0x85, 0x39, 0x22, 0x00, 0x14, 0x74, 0x01, 0x8c, 0x49,
	0x6c, 0xe0, 0x30, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x96, 0x1b, 0x1a, 0x42, 0x5b, 0x01,
	0x00, 0x00,
}
